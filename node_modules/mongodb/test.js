var mongodb = require("./");

var uri = "mongodb://localhost:27017/test";
var collectionName = "bugtest";

var insertFirst = false;
var batchSize = 1000;

process.on('uncaughtException', handleError);

mongodb.connect(uri, function(err, db) {
    if(err) throw err;

    db.listCollections({ name: collectionName }).toArray(function(err, names) {
        if(err) return handleError(err);

        if(names.length == 0) {
            // collection does not exist, create it
            db.createCollection(collectionName, {}, function (err, collection) {
                if (err) return handleError(err);
                runTest(collection);
            });
        }
        else {
            // collection exists, get it
            db.collection(collectionName, { strict: true }, function(err, collection) {
                if(err) return handleError(err);
                runTest(collection);
            });
        }

    });
});

function runTest(collection) {

    var operation = collection.initializeUnorderedBulkOp(),
        documents = [];

    for(var i = 0; i < 10000; i++) {
        var document = { name: 'bob' + i };
        documents.push(document);
        operation.insert(document);
    }

    operation.execute(function(err, result) {
        if (err) return handleError(err);

        operation = collection.initializeUnorderedBulkOp();

        if(insertFirst) {
            // if you add the inserts to the batch first, it works fine.
            insertDocuments();
            replaceDocuments();
        }
        else {
            // if you add the updates to the batch first, it fails with the error "insert must contain at least one document"
            replaceDocuments();
            insertDocuments();
        }

        operation.execute(function (err, result) {
            if (err) return handleError(err);

            console.log("Success! Inserted: " + (result.nInserted || 0) + ", Updated: " + (result.nModified || 0));
            process.exit(0);
        });
    });

    function insertDocuments() {
        for (i = 10000; i < 10200; i++) {
            operation.insert({name: 'bob' + i});
        }
    }

    function replaceDocuments() {
        for (var i = 0; i < batchSize; i++) {
            operation.find({_id: documents[i]._id}).replaceOne({name: 'joe' + i});
        }
    }
}

function handleError(err) {
    console.log(err.name + ": " + err.message + "\n" + err.stack);
    process.exit(1);
}